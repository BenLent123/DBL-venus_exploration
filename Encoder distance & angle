#include <Servo.h>  
Servo servoLeft;                             
Servo servoRight;
Servo servoUltrasound;
#define ultrasoundServo 11
#define leftServo 12
#define rightServo 13
#define LENCODER 8
#define RENCODER 7
#define ultrasoundPin 9
int nholesR =0;
int nholesL = 0;
bool prevreadL;
bool prevreadR;


void setup() {
  Serial.begin(9600);
  pinMode(LENCODER, INPUT);                   
  pinMode(RENCODER, INPUT);
  servoRight.attach(rightServo);                   
  servoLeft.attach(leftServo);
}



void loop(){
int d;
forward();
Dret();
d = ping();
Serial.print("SensorDis:");
Serial.println(d);
}

int ping(){
  int duration, USDistance;
  pinMode(ultrasoundPin, OUTPUT);
  digitalWrite(ultrasoundPin, LOW);
  delayMicroseconds(2);
  digitalWrite(ultrasoundPin, HIGH);
  delayMicroseconds(5);
  digitalWrite(ultrasoundPin, LOW);
  pinMode(ultrasoundPin, INPUT);
  duration = pulseIn(ultrasoundPin, HIGH);
  USDistance = duration / 29 / 2;
  printDistance(USDistance);
  return(USDistance);
}

void printDistance(int USDistance){
  Serial.print(USDistance);
  Serial.print("cm");
  Serial.println();
}


void forward() {
  servoLeft.attach(leftServo);                   
  servoRight.attach(rightServo);
  servoRight.writeMicroseconds(1300);         
  servoLeft.writeMicroseconds(1700);
}    

void backward() {
  servoLeft.attach(leftServo);                   
  servoRight.attach(rightServo);
  servoRight.writeMicroseconds(1700);         
  servoLeft.writeMicroseconds(1300);
}   

void spinL() {
  servoLeft.attach(leftServo);                   
  servoRight.attach(rightServo);
  servoLeft.writeMicroseconds(1700);         
  servoRight.writeMicroseconds(1700);
} 

void spinR() {
  servoLeft.attach(leftServo);                   
  servoRight.attach(rightServo);
  servoLeft.writeMicroseconds(1300);         
  servoRight.writeMicroseconds(1300);
}  

void stop() {
  servoLeft.detach();
  servoRight.detach();
}  


float leftencoder() {
  
  boolean readwheel = digitalRead(LENCODER);                  //read encoders
  if (readwheel == 1 && readwheel != prevreadL) {             //make sure that it is not the same hole being read
    nholesL += 1;
    prevreadL = 1;
  } else if (readwheel == 0) {
    prevreadL = 0;
  }
  

  float distance = (((nholesL)*3.14*6.5)/8);
  return(distance);  

}

float rightencoder() {
  boolean readwheel = digitalRead(RENCODER);                  //read encoders
  if (readwheel == 1 && readwheel != prevreadR) {             //make sure that it is not the same hole being read
    nholesR += 1;
    prevreadR = 1;
  } else if (readwheel == 0) {
    prevreadR = 0;
  }
  
  
  float distance = (((nholesR)*3.14*6.5)/8);
  return(distance);
}

float Dret(){
float a = leftencoder();
float b = rightencoder();

Serial.print("Distance R:");
Serial.println(b);
Serial.print("Distance L:");
Serial.println(a);
}
