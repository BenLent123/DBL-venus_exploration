#include <Servo.h>  
Servo servoLeft;                             
Servo servoRight;
Servo servoUltrasound;
#define ultrasoundServo 11
#define leftServo 12
#define rightServo 13
#define LENCODER 7
#define RENCODER 8
#define ultrasoundPin 9
int nholesR =0;
int nholesL = 0;
bool prevreadL;
bool prevreadR;


void setup() {
  Serial.begin(9600);
  pinMode(LENCODER, INPUT);                   
  pinMode(RENCODER, INPUT);
  servoRight.attach(rightServo);                   
  servoLeft.attach(leftServo);
  encodersetup();
}

void encodersetup(){
bool a = digitalRead(LENCODER);
//bool b = digitalRead(RENCODER);
spinR();
while (digitalRead(RENCODER) != a){
}
a = digitalRead(RENCODER);
//bool b = digitalRead(RENCODER);
spinL();
while (digitalRead(LENCODER) != a){
}
}
void forward() {
  stop();
  servoLeft.attach(leftServo);                   
  servoRight.attach(rightServo);
  servoRight.write(0);         
  servoLeft.write(180);
}    

void backward() {
  stop();
  servoLeft.attach(leftServo);                   
  servoRight.attach(rightServo);
  servoRight.write(180);         
  servoLeft.write(0);
}   

void spinL() {
  stop();
  servoRight.attach(rightServo);
  servoLeft.detach();
  servoRight.write(0);
  
} 

void spinR() {
  stop();
  servoLeft.attach(leftServo);
  servoRight.detach();                   
  servoLeft.write(180);         
  
}  

void stop() {
  servoLeft.detach();
  servoRight.detach();
}  

//////////////////////////////////////////////////
/////////////////////////////////////////////////
float leftencoder() {
  
  boolean readwheel = digitalRead(LENCODER);                  //read encoders
  if (readwheel == 1 && readwheel != prevreadL) {             //make sure that it is not the same hole being read
    nholesL += 1;
    prevreadL = 1;
  } else if (readwheel == 0) {
    prevreadL = 0;
  }
  

  float distance = (((nholesL)*3.14*6.5)/8);
  return(distance);  

}

float rightencoder() {
  boolean readwheel = digitalRead(RENCODER);                  //read encoders
  if (readwheel == 1 && readwheel != prevreadR) {             //make sure that it is not the same hole being read
    nholesR += 1;
    prevreadR = 1;
  } else if (readwheel == 0) {
    prevreadR = 0;
  }
  
  
   float distance = (((nholesR)*3.14*6.5)/8);
  return(distance);
}

float leftencoderReset() {
  float distance = 0;
  boolean readwheel = digitalRead(LENCODER);                  //read encoders
  if (readwheel == 1 && readwheel != prevreadL) {             //make sure that it is not the same hole being read
    nholesL += 1;
    prevreadL = 1;
  } else if (readwheel == 0) {
    prevreadL = 0;
  }
  

  distance = (((nholesL)*3.14*6.5)/8);
  return(distance);  

}

float rightencoderReset() {
  float distance = 0;
  boolean readwheel = digitalRead(RENCODER);                  //read encoders
  if (readwheel == 1 && readwheel != prevreadR) {             //make sure that it is not the same hole being read
    nholesR += 1;
    prevreadR = 1;
  } else if (readwheel == 0) {
    prevreadR = 0;
  }
  
  
   distance = (((nholesR)*3.14*6.5)/8);
  return(distance);
}
/////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

char angle(){
float tempR = 0;
float tempL = 0;
char turn = 'n';
tempR = 0;
tempL = 0;
 
  if (tempR > tempL){
    tempR = rightencoder();
    tempL = leftencoder();
    turn = 'L';
  }
  else if (tempL > tempR){
    tempR = rightencoder();
    tempL = leftencoder();
    turn = 'R';
  }
  else if (tempL == tempR){
    tempR = rightencoder();
    tempL = leftencoder();
    turn = 's';
  }
  return(turn);
}



void loop(){

spinL();
for (int i = 0; i<200;i++){
float DisR = rightencoder();
float DisL = leftencoder();
char turn = angle();
Serial.print("L:");
Serial.println(DisL);
Serial.print("R:");
Serial.println(DisR);
Serial.print("D: ");
Serial.println(turn);
delay(20);
}

spinR();
for (int i = 0; i<200;i++){
float DisR = rightencoder();
float DisL = leftencoder();
char turn = angle();
Serial.print("L:");
Serial.println(DisL);
Serial.print("R:");
Serial.println(DisR);
Serial.print("D: ");
Serial.println(turn);
delay(20);
}

}


