#include <Servo.h>
#include <stdio.h>
#include <stdlib.h>
//////////////////////////////////
Servo servoLeft;
Servo servoRight;
Servo servoUltrasound;
Servo gripper;
//////////////////////////////////
#define RXbee 0
#define TX 1
#define ultrasoundPin 9
#define grabberServoPin 10
#define ultrasoundServo 11
#define leftServo 12
#define rightServo 13
#define leftSensor 3   // TO BE CHANGED IR SENSOR
#define rightSensor 3 
#define LENCODER 8
#define RENCODER 7
int nholesR =0;
int nholesL = 0;
bool prevreadL;
bool prevreadR; // TO BE CHANGED IR SENSOR
int counterLoop = 0;
int scanRes = 0;
bool switchTurnDirection = false;
int map[8][8];
// negative --> obstacle / 1 --> block / 2 --> home 
//////////////////////////////////
//1.10m *1.10 m --> 13*13 cm 
void setup() {
  Serial.begin(9600);
  pinMode(LENCODER, INPUT);                   
  pinMode(RENCODER, INPUT);
  servoRight.attach(rightServo);
  servoLeft.attach(leftServo);
  servoUltrasound.attach(ultrasoundServo);
}

int map_setup(map)
{
    for (int i = 0; i < 8; i++)
    {
        for (int j = 0; j < 8; j++)
        {
          if (i == 0 && j == 0){
            map[i][j] = 2;
          }

            map[i][j] = 0;
        }
    }
}

void currentLOC(map){
int i = 0;
loc = map[0][0];
float a = leftencoder();
float b = rightencoder();
if (a > 13 && b >13){
i++
loc = map[i][0]
}

}

//////////////////////////////////////////////////
/////////////////////////////////////////////////
float leftencoder() {
  
  boolean readwheel = digitalRead(LENCODER);                  //read encoders
  if (readwheel == 1 && readwheel != prevreadL) {             //make sure that it is not the same hole being read
    nholesL += 1;
    prevreadL = 1;
  } else if (readwheel == 0) {
    prevreadL = 0;
  }
  

  float distance = (((nholesL)*3.14*6.5)/8);
  return(distance);  

}

float rightencoder() {
  boolean readwheel = digitalRead(RENCODER);                  //read encoders
  if (readwheel == 1 && readwheel != prevreadR) {             //make sure that it is not the same hole being read
    nholesR += 1;
    prevreadR = 1;
  } else if (readwheel == 0) {
    prevreadR = 0;
  }
  
  
  float distance = (((nholesR)*3.14*6.5)/8);
  return(distance);
}

void forward() {
  servoLeft.attach(leftServo);
  servoRight.attach(rightServo);
  servoRight.writeMicroseconds(1300);
  servoLeft.writeMicroseconds(1700);
}

void backward() {

  servoLeft.attach(leftServo);
  servoRight.attach(rightServo);
  servoRight.writeMicroseconds(1700);
  servoLeft.writeMicroseconds(1300);
}

void spinL() {

  servoLeft.attach(leftServo);
  servoRight.attach(rightServo);
  servoLeft.writeMicroseconds(1700);
  servoRight.writeMicroseconds(1700);
}

void spinR() {

  servoLeft.attach(leftServo);
  servoRight.attach(rightServo);
  servoLeft.writeMicroseconds(1300);
  servoRight.writeMicroseconds(1300);
  
}

void stop() {

  servoLeft.detach();
  servoRight.detach();
}
/////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////




void main(){
  nav_setup();


}
