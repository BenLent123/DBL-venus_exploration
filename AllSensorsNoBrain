#include <Servo.h>

Servo servoLeft;                             
Servo servoRight;
Servo servoUltrasound;
Servo gripper;

// For ultrasound module:
// 0 degrees is right
// 90 degrees is neutral
// 180 degrees is left

#define RXbee 0
#define TX 1

// PINS SUBJECT TO CHANGE FOR IR SENSORS

#define Sensor1 A0 // Sensor1 is assumed to be the tape detecting sensor, placed verically on the gripper (+/-)
#define Sensor2 A1 // Sensor2 is assumed to be the rock detecting sensor, placed horizontally on the gripper facing 'forward'
#define Sensor3 A2 // Sensor3 is assumed to be the lab detecting sensor (might be the same sensor as rock detecting sensor after careful considerations)

//2 through 6 not in use, digital, some pwm
#define leftEncoderPin 7
#define rightEncoderPin 8
#define ultrasoundPin 9
#define grabberServoPin 10
#define ultrasoundServo 11
#define leftServo 12
#define rightServo 13
//0 through 5 not in use, analog -> USED FOR IR SENSORS

int counterLoop = 0;
int scanRes = 0;
int IR_sensor1 = 0;
int IR_sensor2 = 0;
int IR_sensor3 = 0;
bool turnLeft = false;
bool grabbingRock = false;

int nholesR =0;
int nholesL = 0;
bool prevreadL;
bool prevreadR;

void setup() 
{
  Serial.begin(9600);
  servoRight.attach(rightServo);                   
  servoLeft.attach(leftServo);
  servoUltrasound.attach(ultrasoundServo); 
  gripper.attach(grabberServoPin);
  open_gripper();  
  sensorsetup();
}

void sensorsetup()
{
  servoUltrasound.write(90);
  delay(100);
  return(1);
}

void loop() 
{
  int USDistance = 0;

  IR_sensor1 = 0;
  IR_sensor2 = 0;
  IR_sensor3 = 0;
  counterLoop++;

  Dret();
  


  // periodicscan threshold should be finetuned after all the modules are included in the code to find a right balance
  
  if (counterLoop > 5)
  {
    scanRes = periodicScan();
    counterLoop = 0;
    servoUltrasound.write(90);
    if (scanRes == 0) 
    {
      // means something detected at 0 (right?)
      backward();
      delay(50);
      spinR();
      delay(200);
    }
    if (scanRes == 180)
    {
      backward();
      delay(50);
      spinL();
      delay(200);
    }
    
  }
  
  servoUltrasound.write(50); 
  for(int i = 50;i<130;i=i+8)
  {
    servoUltrasound.write(i);
    USDistance = ping();
    Dret();

    // returning 1 equals black detected
    // returning -1 equals white detected
    // returning 0 equals nothing detected
    IR_sensor1 = infra_ping(Sensor1);
    // IR_sensor2 = infra_ping(Sensor2);
    // IR_sensor3 = infra_ping(Sensor3);
      
    if((USDistance < 20 ) && (USDistance != 0) )
    {
      // Ultrasound has detected something

      if(IR_sensor2 == -1)
      {
        // rock sensor detected white
        Serial.println("Ultrasound detected something, IR detected white");    
        // pickup rock 

        close_gripper();
        grabbingRock = true;

      }
      else if (IR_sensor1 == 1) 
      {
        // tape sensor detected black
        Serial.println("Ultrasound detected something, IR detected black");
        // home base detected
        // protocol to navigate to drive up ramp

        open_gripper();
        grabbingRock = false;        


      }
      else
      {
        // neither sensor detected anything        
        Serial.println("Ultrasound detected something, IR function returned 0");
        // avoid obstacle

        backward();
        servoUltrasound.write(90);
        delay(50);

        if(turnLeft==false){
          spinR();
        }else{
          spinL();
        }
        delay(150);
      }

    }
    else
    {
      // nothing detected by Ultrasound sensor.

      if(IR_sensor2 == -1)
      {
        // rock sensor detected white
        Serial.println("Nothing ultrasound detected, IR detected white");
        // initiate rock grabbing protocol

        close_gripper();
        grabbingRock = true;
         
      }
      else if (IR_sensor1 == 1)
      {
        // tape sensor detected black
        Serial.println("Nothing ultrasound detected, IR detected black");

        // avoid obstacle
        backward();
        servoUltrasound.write(90);
        delay(50);

        if(turnLeft==false){
          spinR();
        }else{
          spinL();
        }
        delay(150);

      }
      else
      {        
        Serial.println("Nothing ultrasound detected, neither IR sensor detected something meaningful");
        forward();
      }

    }

  }
  delay(50);
}

int ping(){
  int duration, USDistance;
  pinMode(ultrasoundPin, OUTPUT);
  digitalWrite(ultrasoundPin, LOW);
  delayMicroseconds(2);
  digitalWrite(ultrasoundPin, HIGH);
  delayMicroseconds(5);
  digitalWrite(ultrasoundPin, LOW);
  pinMode(ultrasoundPin, INPUT);
  duration = pulseIn(ultrasoundPin, HIGH);
  USDistance = duration / 29 / 2;
  printDistance(USDistance);
  return(USDistance);
}

void printDistance(int USDistance){
  Serial.print(USDistance);
  Serial.print("cm");
  Serial.println();
}

void forward() {
  servoLeft.attach(leftServo);                   
  servoRight.attach(rightServo);
  servoRight.writeMicroseconds(1300);         
  servoLeft.writeMicroseconds(1700);
}    

void backward() {
  servoLeft.attach(leftServo);                   
  servoRight.attach(rightServo);
  servoRight.writeMicroseconds(1700);         
  servoLeft.writeMicroseconds(1300);
}   

void spinL() {
  servoLeft.attach(leftServo);                   
  servoRight.attach(rightServo);
  servoLeft.writeMicroseconds(1700);         
  servoRight.writeMicroseconds(1700);
} 

void spinR() {
  servoLeft.attach(leftServo);                   
  servoRight.attach(rightServo);
  servoLeft.writeMicroseconds(1300);         
  servoRight.writeMicroseconds(1300);
}  

void stop() {
  servoLeft.detach();
  servoRight.detach();
}  


int periodicScan() 
{
  int USDistance;
  bool left = false;
  bool right = false;
  stop();

  // bool save_state = turnLeft;

  servoUltrasound.write(0);
  delay(750);
  USDistance = ping();
  if(USDistance < 20 && USDistance != 0){
    right = true;
  }
  if(USDistance < 40 && USDistance != 0){
    turnLeft = true;
  }

  servoUltrasound.write(180);
  delay(1000);
  USDistance = ping();
  if(USDistance < 20 && USDistance != 0){
    left = true;
  }
  if(USDistance < 40 && USDistance != 0){
    turnLeft = false;
  }

  if(right==true && left == true){
    // obstacles on both sides
    return(90);
  }else if(right==true && left == false){
    // obstactle at direction 180 (left?)
    return(180);
  }else if(right==false && left == true){
    // obstacle at direction 0 (right?)
    return(0);
  }
  return(-1);
}

void open_gripper() 
{
  gripper.write(90);// set the servo position to 90 degrees 
  delay(750); // wait for 0.75 sec
}

void close_gripper()
{
  gripper.write(180);
  delay(750);
}


int infra_ping(int pin)
{
  
  // below is white detected (probably a rock)
  int lower_threshold = 550;
  // above is black detected (probably tape)
  int upper_thereshold = 700;

  // Pay attention to amount of sunlight in room because the infrared sunlight is also registerd by the sensor
  // calibrate before uploading using external program

  switch (pin){
    case Sensor1:
    // tape detecting sensor
      lower_threshold = 550;
      upper_thereshold = 800;
      break;
    case Sensor2:
    // rock detecting sensor
      lower_threshold = 550;
      upper_thereshold = 700;
      break;
    case Sensor3:
      lower_threshold = 550;
      upper_thereshold = 700;
      break;
    default:
      lower_threshold = 550;
      upper_thereshold = 800;
      break;
  }

  int infra_result = -1;
  infra_result = analogRead(pin);

  Serial.println("Infra ping result");
  
  Serial.println(infra_result);

  if(infra_result <= lower_threshold){

    return(-1);

  }else if(infra_result >= upper_thereshold){
    
    return(1);
    
  }
  return(0);

    // returning 1 equals black detected
    // returning -1 equals white detected
    // returning 0 equals nothing detected

}

float leftencoder() {
  
  boolean readwheel = digitalRead(leftEncoderPin);                  //read encoders
  if (readwheel == 1 && readwheel != prevreadL) {             //make sure that it is not the same hole being read
    nholesL += 1;
    prevreadL = 1;
  } else if (readwheel == 0) {
    prevreadL = 0;
  }
  

  float distance = (((nholesL)*3.14*6.5)/8);
  return(distance);  

}

float rightencoder() {
  boolean readwheel = digitalRead(rightEncoderPin);                  //read encoders
  if (readwheel == 1 && readwheel != prevreadR) {             //make sure that it is not the same hole being read
    nholesR += 1;
    prevreadR = 1;
  } else if (readwheel == 0) {
    prevreadR = 0;
  }
  
  
  float distance = (((nholesR)*3.14*6.5)/8);
  return(distance);
}

float Dret(){
float a = leftencoder();
float b = rightencoder();

Serial.print("Distance R:");
Serial.println(b);
Serial.print("Distance L:");
Serial.println(a);
}
